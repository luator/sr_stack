#!/usr/bin/python3
"""Create super resolution image by stacking multiple images

(c) 2020 Felix Widmaier, License: MIT

Images should be taken in close succession (ideally using continuous mode)
while holding the camera with the hand (it is intended that the original
images are not aligned perfectly to get sub-pixel information).

The basic procedure performed by this script is:

 1. Resize images by factor 2.
 2. Align them.
 3. Combine them by averaging the stack.

This script is based on the one posted here:
https://discuss.pixls.us/t/script-to-automate-creation-of-superresolution-images-from-a-series-of-handheld-shots/3163

Requirements:

 - ImageMagick for resizing.
 - Hugin for aligning and stacking

Example Usage:

To stack all jpg images in the current directory

    sr_stack *.jpg --output stacked.tif

"""
import argparse
import pathlib
import os


if __name__ == "__main__":

    p = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    p.add_argument(
        "images",
        nargs="+",
        type=pathlib.Path,
        metavar="IMAGE",
        help="List of input images.",
    )
    p.add_argument(
        "--output",
        "-o",
        type=pathlib.Path,
        required=True,
        metavar="FILENAME",
        help="Name of the output image.",
    )
    p.add_argument(
        "--tmpdir",
        "-t",
        default="./resized",
        type=pathlib.Path,
        metavar="DIRECTORY",
        help="Directory in which temporary files are stored.",
    )
    p.add_argument(
        "--force",
        "-f",
        action="store_true",
        help="Overwrite existing files.",
    )
    args = p.parse_args()

    if args.output.exists() and not args.force:
        print(
            f"Specified output file {args.output} already exists."
            "  Rerun with -f to overwrite it."
        )
        exit(1)

    if args.tmpdir.exists():
        print(
            f"Specified tmpdir '{args.tmpdir}' already exists."
            "  Delete it first to avoid unexpected results."
        )
        exit(1)
    args.tmpdir.mkdir()

    aligned_prefix = args.tmpdir / "aligned_"

    # Resize image one by one (doing all in one `convert` call can easily exceed
    # image magicks memory limits).
    for img in args.images:
        print(f"Resize {img}")
        resized_file = args.tmpdir / img.with_suffix(".tif").name
        os.system(f'convert "{img}" -resize 200% "{resized_file}"')

    # auto-align resized images and crop all of them to aligned area
    cmd = f"\
        align_image_stack --distortion -C -z -a {aligned_prefix} \
            --corr=0.8 -t 1 -c 100 -v \
            {args.tmpdir}/*.tif \
    "
    os.system(cmd)

    # Stack images using Winsor mean (clips outliers which could be harmful for the
    # normal mean).
    cmd = f"hugin_stacker --mode=winsor --output='{args.output}' {aligned_prefix}*"
    os.system(cmd)
